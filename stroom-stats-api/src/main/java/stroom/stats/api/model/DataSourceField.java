/*
 * Stroom Stats API
 * APIs for interacting with Stroom Stats.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package stroom.stats.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * The definition of a field within a data source
 */
@ApiModel(description = "The definition of a field within a data source")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-12-19T09:26:40.688Z")
public class DataSourceField {
  /**
   * The data type for the field
   */
  public enum TypeEnum {
    @SerializedName("FIELD")
    FIELD("FIELD"),
    
    @SerializedName("NUMERIC_FIELD")
    NUMERIC_FIELD("NUMERIC_FIELD"),
    
    @SerializedName("DATE_FIELD")
    DATE_FIELD("DATE_FIELD"),
    
    @SerializedName("ID")
    ID("ID");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("queryable")
  private Boolean queryable = null;

  /**
   * Gets or Sets conditions
   */
  public enum ConditionsEnum {
    @SerializedName("CONTAINS")
    CONTAINS("CONTAINS"),
    
    @SerializedName("EQUALS")
    EQUALS("EQUALS"),
    
    @SerializedName("GREATER_THAN")
    GREATER_THAN("GREATER_THAN"),
    
    @SerializedName("GREATER_THAN_OR_EQUAL_TO")
    GREATER_THAN_OR_EQUAL_TO("GREATER_THAN_OR_EQUAL_TO"),
    
    @SerializedName("LESS_THAN")
    LESS_THAN("LESS_THAN"),
    
    @SerializedName("LESS_THAN_OR_EQUAL_TO")
    LESS_THAN_OR_EQUAL_TO("LESS_THAN_OR_EQUAL_TO"),
    
    @SerializedName("BETWEEN")
    BETWEEN("BETWEEN"),
    
    @SerializedName("IN")
    IN("IN"),
    
    @SerializedName("IN_DICTIONARY")
    IN_DICTIONARY("IN_DICTIONARY");

    private String value;

    ConditionsEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("conditions")
  private List<ConditionsEnum> conditions = new ArrayList<ConditionsEnum>();

  public DataSourceField type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The data type for the field
   * @return type
  **/
  @ApiModelProperty(example = "null", required = true, value = "The data type for the field")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public DataSourceField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the field
   * @return name
  **/
  @ApiModelProperty(example = "field1", required = true, value = "The name of the field")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DataSourceField queryable(Boolean queryable) {
    this.queryable = queryable;
    return this;
  }

   /**
   * Whether the field can be used in predicate in a query
   * @return queryable
  **/
  @ApiModelProperty(example = "true", required = true, value = "Whether the field can be used in predicate in a query")
  public Boolean getQueryable() {
    return queryable;
  }

  public void setQueryable(Boolean queryable) {
    this.queryable = queryable;
  }

  public DataSourceField conditions(List<ConditionsEnum> conditions) {
    this.conditions = conditions;
    return this;
  }

  public DataSourceField addConditionsItem(ConditionsEnum conditionsItem) {
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * The supported predicate conditions for this field
   * @return conditions
  **/
  @ApiModelProperty(example = "null", required = true, value = "The supported predicate conditions for this field")
  public List<ConditionsEnum> getConditions() {
    return conditions;
  }

  public void setConditions(List<ConditionsEnum> conditions) {
    this.conditions = conditions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceField dataSourceField = (DataSourceField) o;
    return Objects.equals(this.type, dataSourceField.type) &&
        Objects.equals(this.name, dataSourceField.name) &&
        Objects.equals(this.queryable, dataSourceField.queryable) &&
        Objects.equals(this.conditions, dataSourceField.conditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, name, queryable, conditions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceField {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    queryable: ").append(toIndentedString(queryable)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

