/*
 * Stroom Stats API
 * APIs for interacting with Stroom Stats.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package stroom.stats.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Describes the sorting applied to a field
 */
@ApiModel(description = "Describes the sorting applied to a field")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-12-19T09:26:40.688Z")
public class Sort {
  @SerializedName("order")
  private Integer order = null;

  /**
   * The direction to sort in, ASCENDING or DESCENDING
   */
  public enum DirectionEnum {
    @SerializedName("ASCENDING")
    ASCENDING("ASCENDING"),
    
    @SerializedName("DESCENDING")
    DESCENDING("DESCENDING");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("direction")
  private DirectionEnum direction = null;

  public Sort order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Where multiple fields are sorted this value describes the sort order, with 0 being the first field to sort on
   * @return order
  **/
  @ApiModelProperty(example = "0", required = true, value = "Where multiple fields are sorted this value describes the sort order, with 0 being the first field to sort on")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }

  public Sort direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * The direction to sort in, ASCENDING or DESCENDING
   * @return direction
  **/
  @ApiModelProperty(example = "ASCENDING", required = true, value = "The direction to sort in, ASCENDING or DESCENDING")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sort sort = (Sort) o;
    return Objects.equals(this.order, sort.order) &&
        Objects.equals(this.direction, sort.direction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(order, direction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sort {\n");
    
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

