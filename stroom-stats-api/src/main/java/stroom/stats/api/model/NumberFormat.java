/*
 * Stroom Stats API
 * APIs for interacting with Stroom Stats.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package stroom.stats.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * The definition of a format to apply to numeric data
 */
@ApiModel(description = "The definition of a format to apply to numeric data")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-12-19T13:37:48.590Z")
public class NumberFormat {
  @SerializedName("decimalPlaces")
  private Integer decimalPlaces = null;

  @SerializedName("useSeparator")
  private Boolean useSeparator = null;

  public NumberFormat decimalPlaces(Integer decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
    return this;
  }

   /**
   * The number of decimal places
   * @return decimalPlaces
  **/
  @ApiModelProperty(example = "2", required = true, value = "The number of decimal places")
  public Integer getDecimalPlaces() {
    return decimalPlaces;
  }

  public void setDecimalPlaces(Integer decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }

  public NumberFormat useSeparator(Boolean useSeparator) {
    this.useSeparator = useSeparator;
    return this;
  }

   /**
   * Whether to use a thousands separator or not. Defaults to false
   * @return useSeparator
  **/
  @ApiModelProperty(example = "true", value = "Whether to use a thousands separator or not. Defaults to false")
  public Boolean getUseSeparator() {
    return useSeparator;
  }

  public void setUseSeparator(Boolean useSeparator) {
    this.useSeparator = useSeparator;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NumberFormat numberFormat = (NumberFormat) o;
    return Objects.equals(this.decimalPlaces, numberFormat.decimalPlaces) &&
        Objects.equals(this.useSeparator, numberFormat.useSeparator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decimalPlaces, useSeparator);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NumberFormat {\n");
    
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("    useSeparator: ").append(toIndentedString(useSeparator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

