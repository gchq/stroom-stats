/*
 * Stroom Stats API
 * APIs for interacting with Stroom Stats.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package stroom.stats.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import stroom.stats.api.model.ExpressionItem;

/**
 * A logical addOperator term in a query expression tree
 */
@ApiModel(description = "A logical addOperator term in a query expression tree")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-12-19T13:37:48.590Z")
public class ExpressionOperator {
  /**
   * The logical addOperator type
   */
  public enum OpEnum {
    @SerializedName("AND")
    AND("AND"),
    
    @SerializedName("OR")
    OR("OR"),
    
    @SerializedName("NOT")
    NOT("NOT");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("op")
  private OpEnum op = null;

  @SerializedName("children")
  private List<ExpressionItem> children = new ArrayList<ExpressionItem>();

  @SerializedName("enabled")
  private Boolean enabled = null;

  public ExpressionOperator op(OpEnum op) {
    this.op = op;
    return this;
  }

   /**
   * The logical addOperator type
   * @return op
  **/
  @ApiModelProperty(example = "null", required = true, value = "The logical addOperator type")
  public OpEnum getOp() {
    return op;
  }

  public void setOp(OpEnum op) {
    this.op = op;
  }

  public ExpressionOperator children(List<ExpressionItem> children) {
    this.children = children;
    return this;
  }

  public ExpressionOperator addChildrenItem(ExpressionItem childrenItem) {
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<ExpressionItem> getChildren() {
    return children;
  }

  public void setChildren(List<ExpressionItem> children) {
    this.children = children;
  }

  public ExpressionOperator enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether this item in the expression tree is enabled or not
   * @return enabled
  **/
  @ApiModelProperty(example = "true", required = true, value = "Whether this item in the expression tree is enabled or not")
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressionOperator expressionOperator = (ExpressionOperator) o;
    return Objects.equals(this.op, expressionOperator.op) &&
        Objects.equals(this.children, expressionOperator.children) &&
        Objects.equals(this.enabled, expressionOperator.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(op, children, enabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressionOperator {\n");
    
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

