task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue -> 
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified" && project.getProperty(propName) != "") {
        val = project.getProperty(propName)
        println "Using property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

def projectGroup = "stroom-stats"
def projectVersion = "${version}"

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath group: 'ca.cutterslade.gradle', name: 'gradle-dependency-analyze', version: '1.1.0'
    }
}

apply plugin: 'idea'


ext.versions = [
    //----------Stroom-Stats-----------
    stroomStats: getPropertyOrDefault('version', 'SNAPSHOT'),

    //------Stroom-libs---------------
    eventLogging: 'v3.1.2_schema-v3.1.2',
    stroomExpression: 'v1.0.1',
    //same version for both stroom-query-api and stroom-query-common
    stroomQuery: 'v2.0.0-alpha.10',

    dropwizard: '1.1.0',
    dropwizardMetrics: '3.2.2', //keep in sync with dropwizard (1.1.0 => 3.2.2)
    slf4j: '1.7.24', //in line with dropwiz version
    logback: '1.2.1', //in line with dropwiz version
    hbase: '1.2.0', //CDH5.10 uses hbase 1.2.0
    //Curator 2.12.0 depends on zookeeper 3.4.8
    //HBase 1.2.0 depends on zookeeper 3.4.6
    //CDH5.10 uses zookeeper 3.4.5
    //It is not clear how a 3.4.6/3.4.8 ZK client will work against a 3.4.5 ZK quorum

    //curator 2.12 depends on guava but shades the majority of it so should work with newer guava versions
    curator: '2.12.0',

    jaxb: '2.2.10',
    jersey: '2.25.1',

    //0.10.2.0 is available but seems to have issues with spring_kafka_test
    kafka: '0.10.0.1', //CDH5.11 uses kafka 0.10.0+kafka2.1

    //1.1.1.RELEASE is the latest version that runs against kafka 0.10.0.1
    spring_kafka_test: '1.1.1.RELEASE',

    swagger: '1.5.16',
    zzzDummyzzz: 'Here to make sorting easier'
]

//3rd Party libs
ext.libs = [
    //------Stroom-libs---------------
    eventLogging: "event-logging:event-logging:$versions.eventLogging",
    stroomExpression: "stroom:stroom-expression:$versions.stroomExpression",
    stroomQueryApi: "stroom:stroom-query-api:$versions.stroomQuery",
    stroomQueryCommon: "stroom:stroom-query-common:$versions.stroomQuery",
    
    //------------3rd-party------------
    assertj: "org.assertj:assertj-core:3.6.2",
    byte_buddy: "net.bytebuddy:byte-buddy:1.5.8",
    commons_lang: "commons-lang:commons-lang:2.6",
    curator_client: "org.apache.curator:curator-client:$versions.curator",
    curator_framework: "org.apache.curator:curator-framework:$versions.curator",
    curator_recipies: "org.apache.curator:curator-recipes:$versions.curator",
    curator_service_discovery: "org.apache.curator:curator-x-discovery:$versions.curator",
    curator_test: "org.apache.curator:curator-test:$versions.curator",
    dropwizard_auth: "io.dropwizard:dropwizard-auth:$versions.dropwizard",
    dropwizard_auth_jwt: "com.github.toastshaman:dropwizard-auth-jwt:1.1.0-0", //keep in sync with dropwiz
    dropwizard_client: "io.dropwizard:dropwizard-client:$versions.dropwizard",
    dropwizard_core: "io.dropwizard:dropwizard-core:$versions.dropwizard",
    dropwizard_db: "io.dropwizard:dropwizard-db:$versions.dropwizard",
    dropwizard_hibernate: "io.dropwizard:dropwizard-hibernate:$versions.dropwizard",
    dropwizard_jersey: "io.dropwizard:dropwizard-jersey:$versions.dropwizard",
    dropwizard_jetty: "io.dropwizard:dropwizard-jetty:$versions.dropwizard",
    dropwizard_jobs_core: "de.spinscale.dropwizard:dropwizard-jobs-core:2.0.1",
    dropwizard_lifecycle: "io.dropwizard:dropwizard-lifecycle:$versions.dropwizard",
    dropwizard_metrics_annotation: "io.dropwizard.metrics:metrics-annotation:$versions.dropwizardMetrics",
    dropwizard_metrics_healthchecks: "io.dropwizard.metrics:metrics-healthchecks:$versions.dropwizardMetrics", 
    dropwizard_servlets: "io.dropwizard:dropwizard-servlets:$versions.dropwizard",
    dropwizard_configuration: "io.dropwizard:dropwizard-configuration:$versions.dropwizard",
    dropwizard_testing: "io.dropwizard:dropwizard-testing:$versions.dropwizard",
    ehcache: "org.ehcache:ehcache:3.2.0",
    fastClasspathScanner: "io.github.lukehutch:fast-classpath-scanner:2.0.17",
    find_bugs: "com.google.code.findbugs:jsr305:1.3.9",
    guava: "com.google.guava:guava:21.0",
    guice: "com.google.inject:guice:4.0",
    hamcrest_core: "org.hamcrest:hamcrest-core:1.3",
    hbase_shaded_client: "org.apache.hbase:hbase-shaded-client:$versions.hbase",
    hibernate_core: "org.hibernate:hibernate-core:5.1.0.Final",
    hibernate_jpa_api: "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final",
    jCommander: "com.beust:jcommander:1.48",
    jackson_annotations: "com.fasterxml.jackson.core:jackson-annotations:2.7.8",
    javaslang: 'io.javaslang:javaslang:2.0.5',
    javassist: "org.javassist:javassist:3.20.0-GA",
    javax_inject: "javax.inject:javax.inject:1",
    javax_validation_api: "javax.validation:validation-api:1.1.0.Final",
    javax_ws_rs_api: "javax.ws.rs:javax.ws.rs-api:2.0.1",
    jaxb_xjc: "org.glassfish.jaxb:jaxb-xjc:${versions.jaxb}",
    jaxb_runtime: "org.glassfish.jaxb:jaxb-runtime:${versions.jaxb}",
    //jaxb_api: "javax.xml.bind:jaxb-api:${versions.jaxb}",
    //jaxb_impl: "com.sun.xml.bind:jaxb-impl:${versions.jaxb}-b41",
    //jaxb_xjc: "com.sun.xml.bind:jaxb-xjc:${versions.jaxb}-b41",
    jcl_over_slf4j: "org.slf4j:jcl-over-slf4j:$versions.slf4j",
    jersey_server: "org.glassfish.jersey.core:jersey-server:$versions.jersey",
    jersey_client: "org.glassfish.jersey.core:jersey-client:$versions.jersey",
    joda_time: 'joda-time:joda-time:2.9.4',
    jose4j: "org.bitbucket.b_c:jose4j:0.5.5", //keep in sync with dropwizard_auth_jwt
    junit: "junit:junit:4.12", 
    kafka_clients: "org.apache.kafka:kafka-clients:$versions.kafka",
    kafka_streams: "org.apache.kafka:kafka-streams:$versions.kafka",
    kryo: "com.esotericsoftware:kryo-shaded:4.0.0",
    log4j_over_slf4j: "org.slf4j:log4j-over-slf4j:$versions.slf4j",
    logback_classic: "ch.qos.logback:logback-classic:$versions.logback",
    logback_core: "ch.qos.logback:logback-core:$versions.logback",
    mockito_core: "org.mockito:mockito-core:2.+",
    mysql_connector: "mysql:mysql-connector-java:5.1.40",
    objenesis: "org.objenesis:objenesis:2.2", //used with kryo so keep version in sync with that
    saxon: "net.sf.saxon:Saxon-HE:9.6.0-6",
    slf4j_api: "org.slf4j:slf4j-api:$versions.slf4j",
    spring_kafka_test: "org.springframework.kafka:spring-kafka-test:$versions.spring_kafka_test", //instead of spring_kafka_test could use 'org.apache.kafka:kafka-streams-examples'
    swagger_annotations: "io.swagger:swagger-annotations:$versions.swagger",
    xml_apis: "xml-apis:xml-apis:1.0.b2",
    zookeeper: "org.apache.zookeeper:zookeeper:3.4.5",
    zzzDummyzzz: 'Here to make sorting easier'
] 

subprojects {
    apply plugin: 'java'
    apply plugin: 'ca.cutterslade.analyze'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'

    group "$projectGroup"
    version "$projectVersion"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenLocal()
        maven { url "https://dl.bintray.com/stroom/event-logging" }
        maven { url "https://dl.bintray.com/stroom/stroom" }

        //Not currently using the cloudera hbase client as they don't publish a shaded version that can play nice
        //with dropwizard
        //maven {
            //url "http://repository.cloudera.com/artifactory/cloudera-repos/"
        //}
    }

    configurations {
        all {
            //Ensure any transitive deps don't bring any logging implementations with them
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"

            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.name == 'log4j') {
                    details.useTarget "org.slf4j:log4j-over-slf4j:$versions.slf4j"
                }
            }
            resolutionStrategy {
                forcedModules = [
                    //>=v21 removes MoreExecutors.sameThreadExecutor() which is needed by curator 2.11
                    //libs.guava
                ]
            }
        }
    }
}

//TODO this all needs to go once stroom builds the jaxb from the schema
project(':stroom-stats-schema') {

    publishing.publications {
        mavenJava(MavenPublication) {
            //artifactId 'stroom-stats-schema'
            from components.java
            //artifact sourcesJar
        }
    }

    configurations {
        testArtifacts
        sourceArtifacts
    }
    task sourcesJar(type: Jar) {
        baseName = "${project.name}-source"
        from sourceSets.main.allSource
    }
    artifacts {
        sourceArtifacts sourcesJar
    }

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts.archives packageSources
}
