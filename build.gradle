buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        //classpath 'ca.cutterslade.gradle:gradle-dependency-analyze:1.6.0'
    }
}

plugins {
    //declare all plugins here then apply when needed
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply false
    //id 'com.github.jacobono.jaxb' version '1.3.6'
    id 'com.github.jacobono.jaxb' version '1.3.5' apply false
    id "de.undercouch.download" version "4.1.1" apply false
    id "ca.cutterslade.analyze" version "1.6.0"
    //errorprone plugin now needs jdk9 or above
    //id "net.ltgt.errorprone" version "0.8.1" apply false
}

ext.isPropertySet = { propName ->
    if (!project.hasProperty(propName)) {
        return false
    } else {
        def prop = project.getProperty(propName)
        return (prop != "unspecified" && prop != "" && prop != null)
    }
}

ext.ensurePropertyIsSet = { propName -> 
    if (!isPropertySet(propName)) {
        throw new GradleException(
            "Expecting project property [${propName}] or env var [ORG_GRADLE_PROJECT_${propName}] to be set.")
    }
}

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (isPropertySet(propName)) {
        val = project.getProperty(propName)
        println "Getting property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

apply plugin: 'idea'
apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply plugin: 'ca.cutterslade.analyze'

ext.versions = [
    //----------Stroom-Stats-----------
    stroomStats:       getPropertyOrDefault('version', 'SNAPSHOT').replaceFirst(/^v/, ""),

    //------Stroom-libs---------------
    eventLogging:      '3.3.0_schema-v3.3.1',
    stroomAuth:        '6.0.32',
    stroomExpression:  '1.5.15',
    stroomQuery:       '2.2.24', // Same version for both stroom-query-api and stroom-query-common

    dropwizard:        '1.3.12', // used to set the dropwizard-bom version, that controls lots of dependency versions
    dropwizardMetrics: '3.2.2', //keep in sync with dropwizard (1.1.0 => 3.2.2)
    slf4j:             '1.7.24', //in line with dropwiz version
    logback:           '1.2.1', //in line with dropwiz version
    hbase:             '2.1.5', //CDH6.2 uses hbase 2.1
    //Curator 2.12.0 depends on zookeeper 3.4.8
    //HBase 2.1.0 depends on zookeeper 3.4.10
    //CDH6.2 uses zookeeper 3.4.5
    //It is not clear how a 3.4.6/3.4.8 ZK client will work against a 3.4.5 ZK quorum

    //curator 2.12 depends on guava but shades the majority of it so should work with newer guava versions

    // Curator 4 works with ZK 3.4.x in soft compatibility mode, i.e. you must exlude its dep on ZK and explicitly add one for 3.4.x
    curator:           '4.2.0',

    jaxb:              '2.2.10',
    jersey:            '2.25.1',

    // see https://docs.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_cdh_63_maven_artifacts.html
    // for details of cdh component versions
    kafka:             '2.2.1', //CDH6.3 uses kafka 2.2.1

    //2.2.7.RELEASE runs against kafka 2.0.1
    zookeeper:         '3.4.8', // Roughly pegged to the server version used by Cloudera, see links above. This version is forced below.
]

// 3rd Party libs
// Dependency strings for use in sub projects
// If the dependency version is controlled by a BOM, e.g. dropwizard-core, then the 
// dependency is specified with no version. Use of the BOMs is configured further down,
// search for 'platform'.
ext.libs = [
    //------Stroom-libs---------------
    eventLogging:                    "uk.gov.gchq.eventlogging:event-logging:$versions.eventLogging",
    stroomAuthApi:                   "uk.gov.gchq.stroom.auth:stroom-auth-service-api:$versions.stroomAuth",
    stroomQueryApi:                  "uk.gov.gchq.stroom.query:stroom-query-api:$versions.stroomQuery",
    stroomQueryAudit:                "uk.gov.gchq.stroom.query:stroom-query-audit:$versions.stroomQuery",
    stroomQueryCommon:               "uk.gov.gchq.stroom.query:stroom-query-common:$versions.stroomQuery",
    stroomExpression:                "uk.gov.gchq.stroom.expression:stroom-expression:$versions.stroomExpression",

    //------------3rd-party------------
    assertj:                         "org.assertj:assertj-core:3.6.2",
    byte_buddy:                      "net.bytebuddy:byte-buddy:1.5.8",
    commons_lang:                    "org.apache.commons:commons-lang3", // version controlled by DW BOM
    curator_client:                  "org.apache.curator:curator-client:$versions.curator",
    curator_framework:               "org.apache.curator:curator-framework:$versions.curator",
    curator_recipies:                "org.apache.curator:curator-recipes:$versions.curator",
    curator_service_discovery:       "org.apache.curator:curator-x-discovery:$versions.curator",
    curator_test:                    "org.apache.curator:curator-test:$versions.curator",
    dropwizard_auth:                 "io.dropwizard:dropwizard-auth:", // version controlled by DW BOM
    dropwizard_auth_jwt:             "com.github.toastshaman:dropwizard-auth-jwt:1.1.0-0", //keep in sync with dropwiz
    dropwizard_bom:                  "io.dropwizard:dropwizard-bom:$versions.dropwizard",
    dropwizard_client:               "io.dropwizard:dropwizard-client:", // version controlled by DW BOM
    dropwizard_core:                 "io.dropwizard:dropwizard-core:", // version controlled by DW BOM
    dropwizard_db:                   "io.dropwizard:dropwizard-db:", // version controlled by DW BOM
    dropwizard_hibernate:            "io.dropwizard:dropwizard-hibernate:", // version controlled by DW BOM
    dropwizard_jersey:               "io.dropwizard:dropwizard-jersey:", // version controlled by DW BOM
    dropwizard_jetty:                "io.dropwizard:dropwizard-jetty:", // version controlled by DW BOM
    dropwizard_jobs_core:            "de.spinscale.dropwizard:dropwizard-jobs-core:2.0.1",
    dropwizard_lifecycle:            "io.dropwizard:dropwizard-lifecycle:", // version controlled by DW BOM
    dropwizard_metrics_annotation:   "io.dropwizard.metrics:metrics-annotation:", // version controlled by DW BOM
    dropwizard_metrics_healthchecks: "io.dropwizard.metrics:metrics-healthchecks:", // version controlled by DW BOM
    dropwizard_servlets:             "io.dropwizard:dropwizard-servlets:", // version controlled by DW BOM
    dropwizard_configuration:        "io.dropwizard:dropwizard-configuration:", // version controlled by DW BOM
    dropwizard_testing:              "io.dropwizard:dropwizard-testing:", // version controlled by DW BOM
    ehcache:                         "org.ehcache:ehcache:3.2.0",
    fastClasspathScanner:            "io.github.lukehutch:fast-classpath-scanner:2.0.17",
    find_bugs:                       "com.google.code.findbugs:jsr305:1.3.9",
    guava:                           "com.google.guava:guava", // version controlled by DW BOM
    guice:                           "com.google.inject:guice:4.0",
    hamcrest_core:                   "org.hamcrest:hamcrest-core:1.3",
    hbase_shaded_client:             "org.apache.hbase:hbase-shaded-client:$versions.hbase",
    hibernate_core:                  "org.hibernate:hibernate-core:5.1.0.Final",
    hibernate_jpa_api:               "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final",
    jCommander:                      "com.beust:jcommander:1.48",
    jackson_annotations:             "com.fasterxml.jackson.core:jackson-annotations", // version controlled by DW BOM
    jackson_databind:                "com.fasterxml.jackson.core:jackson-databind", // version controlled by DW BOM
    javaslang:                       'io.javaslang:javaslang:2.0.5',
    javassist:                       "org.javassist:javassist", // version controlled by DW BOM
    javax_annotation:                "javax.annotation:javax.annotation-api:1.2",
    javax_inject:                    "javax.inject:javax.inject:1",
    javax_validation_api:            "javax.validation:validation-api:1.1.0.Final",
    javax_ws_rs_api:                 "javax.ws.rs:javax.ws.rs-api:2.0.1",
    jaxb_xjc:                        "org.glassfish.jaxb:jaxb-xjc:${versions.jaxb}",
    jaxb_runtime:                    "org.glassfish.jaxb:jaxb-runtime:${versions.jaxb}",
    jcl_over_slf4j                 : "org.slf4j:jcl-over-slf4j", // version controlled by DW BOM
    jersey_client                  : "org.glassfish.jersey.core:jersey-client", // version controlled by DW BOM
    jersey_common                  : "org.glassfish.jersey.core:jersey-common", // version controlled by DW BOM
    jersey_server                  : "org.glassfish.jersey.core:jersey-server", // version controlled by DW BOM
    joda_time:                       'joda-time:joda-time:2.9.4',
    jose4j:                          "org.bitbucket.b_c:jose4j:0.5.5", //keep in sync with dropwizard_auth_jwt
    junit:                           "junit:junit:4.12",
    kafka_clients:                   "org.apache.kafka:kafka-clients:$versions.kafka",
    kafka_streams:                   "org.apache.kafka:kafka-streams:$versions.kafka",
    kafka_streams_test_utils:        "org.apache.kafka:kafka-streams-test-utils:$versions.kafka",
    kryo:                            "com.esotericsoftware:kryo-shaded:4.0.0",
    log4j_over_slf4j               : "org.slf4j:log4j-over-slf4j", // version controlled by DW BOM
    logback_classic                : "ch.qos.logback:logback-classic", // version controlled by DW BOM
    logback_core                   : "ch.qos.logback:logback-core", // version controlled by DW BOM
    mockito_core:                    "org.mockito:mockito-core:2.28.2",
    mysql_connector:                 "mysql:mysql-connector-java:5.1.40",
    objenesis                      : "org.objenesis:objenesis", // version controlled by DW BOM
    saxon:                           "net.sf.saxon:Saxon-HE:9.6.0-6",
    slf4j_api                      : "org.slf4j:slf4j-api", // version controlled by DW BOM
    wiremock:                        'com.github.tomakehurst:wiremock:2.23.2',
    xml_apis:                        "xml-apis:xml-apis:1.0.b2",
    zookeeper:                       "org.apache.zookeeper:zookeeper:$versions.zookeeper",
    zzzDummyzzz:                     'Here to make sorting easier'
]

ext.isReleaseBuild = !versions.stroomStats.endsWith('SNAPSHOT')

if (isReleaseBuild) {
    println "This is a release build for maven version [${versions.stroomStats}]"
    // Ensure the various props are set for signing and publishing to sonatype

    // The username for Sonatype OSSRH Jira account
    ensurePropertyIsSet("sonatypeUsername")
    // The password for Sonatype OSSRH Jira account
    ensurePropertyIsSet("sonatypePassword")
    // The GPG2 secret key in ascii armour format, base64 encoded
    ensurePropertyIsSet("signingKey")
    // The password for the GPG2 secret key
    ensurePropertyIsSet("signingPassword")
}

def dockerDir = "${rootProject.projectDir}/docker"
ext.stroomStatsDockerBuildDir = "${dockerDir}/stroom-stats/build"
ext.stroomStatsHbaseDockerBuildDir = "${dockerDir}/stroom-stats-hbase/build"

// Make sure we are running under the right version of JVM
if (!JavaVersion.current().isJava8()) {
    throw new GradleException("This build must be run with Java 8 (current = " + JavaVersion.current() + ")")
}

allprojects {
    group = 'uk.gov.gchq.stroom.stats'
    version versions.stroomStats

    apply plugin: 'ca.cutterslade.analyze'
}

// Variable to capture the version of slf4j defined in the DW BOM, so
// we can use it to set the version of slf4j when we do a dependency
// substitution with log4j
def dropwizardBomSlf4jVersion = null


String base64DecodeProjectProperty(String propName) {
    def encodedVal = project.findProperty(propName)
    return encodedVal == null
        ? null
        : new String(Base64.getDecoder().decode(encodedVal.toString())).trim()
}

void configureSigning(Project project) {

    // To create the GPG key do:
    //   gpg2 --gen-key 
    // To list it
    //   gpg2 --list-keys
    // To publish the public key on a keyserver
    //   gpg2 --keyserver hkp://keyserver.ubuntu.com --send-keys <your short key id>
    // To get the ascii-armour private key for use in travis env vars as base64 encoded
    //   gpg2 --armor --export-secret-keys <your short key id> | base64 -w0

    //project.signing.gnupg.keyName = project.findProperty("signingKeyId")

    project.signing {
        println "Configuring project to sign maven artifacts"
        required { project.gradle.taskGraph.hasTask("required") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = base64DecodeProjectProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")

        //println "pword: [$signingPassword]"
        //println "key: [$signingKey]"
        //println "keyId: [$signingKeyId]"

        if (signingKeyId) {
            println "Using in memory pgp key with ID"
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            println "Using in memory pgp key without ID"
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        //useGpgCmd()
        sign project.publishing.publications.mavenJava
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()
        mavenLocal()

        //Not currently using the cloudera hbase client as they don't publish a shaded version that can play nice
        //with dropwizard
        //maven {
            //url "http://repository.cloudera.com/artifactory/cloudera-repos/"
        //}
    }

    configurations {
        all {
            //Ensure any transitive deps don't bring any logging implementations with them
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"
            exclude group: "commons-logging", module: "commons-logging"

            //resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                //if (details.requested.name == 'log4j') {
                    //details.useTarget "org.slf4j:log4j-over-slf4j:$versions.slf4j"
                //}
            //}
            resolutionStrategy {
                forcedModules = [
                    //>=v21 removes MoreExecutors.sameThreadExecutor() which is needed by curator 2.11
                    //libs.guava

                    // Need to force our version of ZK else curator 4 will bring in a newer one
                    libs.zookeeper
                ]
            }
        }
    }
}


//defines a list of gradle projects that we will publish with maven/sonatype
def projectsToBePublished = subprojects.findAll { project ->
    project.path in [
        ':stroom-stats-schema'
    ]
}

//configures only those projects in publishedProjectsPaths
// Be sure to define 'project.ext.pomDescription' in each one
configure(projectsToBePublished) {

    println "Configuring ${project.path} for publishing"

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    //for java plugin
    //see https://docs.gradle.org/current/userguide/java_plugin.html
    java {
        //package JavaDoc as part of publication
        withJavadocJar()
        //package Sources as part of publication
        withSourcesJar()
    }

    //task sourcesJar(type: Jar, dependsOn: classes) {
        //classifier = 'sources'
        //from sourceSets.main.allSource
    //}

    //The javadoc generated by xjc will not pass the default validation
    //imposed by java 8
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    //task javadocJar(type: Jar, dependsOn: javadoc) {
        //classifier = 'javadoc'
        //from javadoc.destinationDir
    //}

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    project.afterEvaluate {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java

                    pom {
                        name = project['name']
                        description = project.ext.pomDescription 
                        url = 'https://github.com/gchq/stroom-stats'
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                name = 'GCHQDevelopers'
                                organization = 'GCQH'
                                organizationUrl = 'https://github.com/gchq'
                            }
                        }
                        scm {
                            connection = 'scm:git:git@github.com:gchq/stroom-stats.git'
                            developerConnection = 'scm:git:git@github.com:gchq/stroom-stats.git'
                            url = 'https://github.com/gchq/stroom-stats'
                        }
                    }         
                }
            }
        }

        def hasSigningKey = project.hasProperty("signingkeyId") || project.findProperty("signingKey")
        if(hasSigningKey) {
            configureSigning(project)
        }
    }
}

// Uses sonotypeUsername and sonotypePassword
// See https://github.com/rwinch/gradle-publish-ossrh-sample
// Also https://github.com/kit-data-manager/nexus-publish-example
nexusPublishing {
    repositories {
        sonatype()    //sonatypeUsername and sonatypePassword properties are used automatically
    }
    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

