apply plugin: 'com.github.johnrengelman.shadow' 
apply plugin: 'net.ltgt.errorprone' 

def jarName = "stroom-stats-service-${version}.jar"
def fatJarName = "stroom-stats-all-${version}.jar"
def dockerBuildDir = "${rootProject.projectDir}/docker/build"

apply plugin: 'application'
mainClassName = 'stroom.stats.service.startup.App'

dependencies {
    //--------Project----------
    compile project(':stroom-stats-schema')
    compile project(':stroom-stats-hbase-client')
    compile project(':stroom-stats-util')
    compile project(':stroom-stats-model')

    // TODO: add HBase-client dependency here, be sure to include the 'all' classifier
    //compile 'stroom:stats:1.0-SNAPSHOT:all'

    //--------Stroom libs------
    compile libs.stroomQueryApi
    compile libs.stroomQueryCommon
    compile libs.stroomExpression

    //--------3rd party--------
    compile libs.curator_client
    compile libs.curator_framework
    compile libs.curator_recipies
    compile libs.curator_service_discovery
    compile libs.dropwizard_auth
    compile libs.dropwizard_auth_jwt
    compile libs.dropwizard_core
    compile libs.dropwizard_jetty
    compile libs.dropwizard_jersey
    compile libs.dropwizard_db
    compile libs.dropwizard_hibernate
    compile libs.dropwizard_jersey
    compile libs.dropwizard_jobs_core
    compile libs.dropwizard_lifecycle
    compile libs.dropwizard_metrics_annotation
    compile libs.dropwizard_metrics_healthchecks
    compile libs.dropwizard_servlets
    compile libs.dropwizard_configuration
    compile libs.ehcache
    compile libs.find_bugs
    compile libs.guava
    compile libs.guice
    compile libs.hbase_shaded_client
    compile libs.hibernate_core
    compile libs.hibernate_jpa_api
    compile libs.jackson_annotations
    compile libs.javaslang
    compile libs.javassist
    compile libs.javax_inject
    compile libs.javax_validation_api
    compile libs.javax_ws_rs_api
    compile libs.jersey_server
    compile libs.jersey_client
    compile libs.jose4j
    compile libs.kafka_clients
    compile libs.kafka_streams
    compile libs.kryo
    compile libs.logback_classic
    compile libs.objenesis //used for Kryo strategies
    compile libs.slf4j_api
    permitUnusedDeclared libs.swagger_annotations //Needed for stroom-query-api 
    compile libs.swagger_annotations
    compile libs.xml_apis
    compile libs.zookeeper

    runtime libs.mysql_connector
    runtime libs.saxon

    testCompile project(':stroom-stats-mocks')

    testCompile libs.hamcrest_core
    testCompile libs.assertj
    testCompile libs.junit

    //deps for integrationTest
    testCompile libs.dropwizard_client
    testCompile libs.fastClasspathScanner
    testCompile libs.dropwizard_testing
    testCompile libs.spring_kafka_test
    
    //TODO gradle-dependency-analyze doesn't understand about integrationTest so says these libs are unused
    permitTestUnusedDeclared libs.dropwizard_testing
    permitTestUnusedDeclared libs.spring_kafka_test
    permitTestUnusedDeclared libs.dropwizard_client
    permitTestUnusedDeclared libs.fastClasspathScanner
    permitTestUnusedDeclared libs.objenesis //TODO Not sure why gradle-dependency-analyze is moaning about this

}

jar {
    manifest {
        attributes(
                "Implementation-Title": "stroom-stats",
                "Implementation-Version": version,
                "Main-Class" : "stroom.stats.service.startup.App"
        )
    }
    archiveName jarName
}

shadowJar {
    // A transformer to merges files in META-INF/services
    mergeServiceFiles()
    archiveName fatJarName
}

run {
    args 'server', './config.yml'
}

sourceSets {
    // This lets us use different directories for our integration tests.
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}


configurations {
    // This means our integration tests get all the dependencies from our tests and we don't need to specify them twice.
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

// This task lets us run the actual integration tests.
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// These lines pull the integration test task into our build process.
check.dependsOn integrationTest
integrationTest.mustRunAfter test

//TODO if we run with -x integrationTest then it is not compiling the int test code

// This means the reports from our integration tests won't over-write the reports from our unit tests.
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

clean{
    delete dockerBuildDir
}

//Copy all the files needed by the docker build into stroom-app/docker/build
task copyFilesForDockerBuild() {
    dependsOn shadowJar
    doFirst {
        //Copy the fat jar
        copy {
            from "${project.buildDir}/libs/${fatJarName}"
            into dockerBuildDir
        }

        //Copy the dropwizard yml configuration
        copy {
            from "${projectDir}/config.yml"
            into dockerBuildDir
        }
    }
}

tasks.build.dependsOn copyFilesForDockerBuild
